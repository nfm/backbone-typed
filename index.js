// Generated by CoffeeScript 1.3.3
(function() {
  var Backbone, TypedModel, logr,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone = require('backbone');

  logr = require('node-logr').getLogger("backbone-typed");

  exports.TypedModel = TypedModel = (function(_super) {

    __extends(TypedModel, _super);

    function TypedModel() {
      return TypedModel.__super__.constructor.apply(this, arguments);
    }

    TypedModel.prototype.__typesCache__ = false;

    TypedModel.prototype.set = function(key, value, options) {
      var aModel, attr, attrs, keys, memberName, origVal, parentType, parentTypes, typedSet, val, _i, _j, _len, _len1, _prop, _ref, _ref1, _val;
      attrs = attr = val = null;
      if (key === Object(key) || key === null) {
        attrs = key;
        options = value;
      } else {
        attrs = {};
        attrs[key] = value;
      }
      if (this.__typesCache__ === false) {
        parentTypes = [];
        aModel = this;
        while (aModel) {
          if (aModel.types) {
            parentTypes.push(aModel.types);
          }
          aModel = aModel.constructor.__super__;
        }
        if (parentTypes.length > 0) {
          this.__typesCache__ = {};
          for (_i = 0, _len = parentTypes.length; _i < _len; _i++) {
            parentType = parentTypes[_i];
            for (_prop in parentType) {
              _val = parentType[_prop];
              this.__typesCache__[_prop] = _val;
            }
          }
        } else {
          this.__typesCache__ = null;
        }
      }
      if (this.__typesCache__ && attrs) {
        keys = Object.keys(attrs);
        for (_j = 0, _len1 = keys.length; _j < _len1; _j++) {
          memberName = keys[_j];
          if (this.__typesCache__[memberName] && attrs[memberName] !== null && attrs[memberName] !== void 0) {
            typedSet = typeof this.__typesCache__[memberName] === "string" ? this.__typesCache__[memberName] : (_ref = this.__typesCache__[memberName].prototype) != null ? _ref.__typeName : void 0;
            if ((_ref1 = this.__typesCache__[memberName].prototype) != null ? _ref1.__typeName : void 0) {
              origVal = attrs[memberName];
              attrs[memberName] = this.__typesCache__[memberName](attrs[memberName]);
              if (origVal && attrs[memberName] === null) {
                exports._logDataDrop(memberName, origVal, typedSet);
              }
            } else {
              exports._logDataDrop(memberName, attrs[memberName], typedSet);
              attrs[memberName] = null;
            }
          }
        }
      }
      return TypedModel.__super__.set.call(this, key, value, options);
    };

    return TypedModel;

  })(Backbone.Model);

  exports._logDataDrop = function(name, originalVal, typed) {
    return logr.error("backbone-typed nulled value of:\"" + name + "\" value:\"" + originalVal + "\" type:\"" + typed + "\"");
  };

  exports.signTypeFunction = function(typeName, callme) {
    var inner;
    inner = function() {
      return callme.apply(this, arguments);
    };
    inner.prototype.__typeName = typeName;
    inner.toString = function() {
      return inner.prototype.__typeName;
    };
    return inner;
  };

  exports.Types = {
    String: exports.signTypeFunction("String", function(param) {
      if (param) {
        return String(param);
      } else {
        return null;
      }
    }),
    Integer: exports.signTypeFunction("Integer", function(param) {
      return (!isNaN(param) ? parseInt(param) : null);
    }),
    Float: exports.signTypeFunction("Float", function(param) {
      return (!isNaN(param) ? parseFloat(param) : null);
    }),
    Boolean: exports.signTypeFunction("Boolean", function(param) {
      switch (param) {
        case "true":
        case "1":
          return true;
        case "false":
        case "0":
          return false;
        default:
          return !!param;
      }
    }),
    Enum: function(obj) {
      var name, value, _vals;
      _vals = (function() {
        var _results;
        _results = [];
        for (name in obj) {
          value = obj[name];
          _results.push(value);
        }
        return _results;
      })();
      return exports.signTypeFunction("Enum", function(lookup) {
        return _vals.filter(function(v) {
          return v === lookup;
        })[0] || null;
      });
    },
    Array: exports.signTypeFunction("Array", function(param) {
      return (!Array.isArray(param) ? null : param);
    })
  };

}).call(this);
